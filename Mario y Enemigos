                                            /** # Goomba y Koopa */
class Goomba:
	Enemy("Goomba", 1){

	init {
		println("iniciando subclase de $name")
	}
}

class Koopa:
	Enemy("Koopa",2){
}

                                              /** # Bool Mario */

val isAlive: Boolean
get() {
	return lives>=1
}
if(mario.isAlive){
	mario.collision("Goomba")
	println("Te quedan ${mario.getLives()}")
}

                                                     /** # Enemigo */

class Enemy(val name: String,val strength:Int) {

	protected var direction: String ="LEFT" //diceccion a la cual va el enemigo

	protected fun changeDiretion(){ //Cambiara de sentido
		direction =if (direction=="RIGHT") "LEFT" else "RIGHT"
		println("$name va en direccion $direccion")
	}

	protected fun die(){ //indica que el jugador murio
		println("$name ha muerto")
	}

	fun collision(collider: String){ 
		when(collider){
			"Weapon" -> die()
			"Enemy" -> changeDirection()
		}
	}
}

                                                    /** # Mario */

class Mario(var vidas: Int =3){ //Indicaremos el nimero de vidas al iniciar el objeto Mario

	init {
		println("Is's a me! Mario!") //vamos a hacer que Mario se presente al construirlo!
	}
	
	private var state = "small" //Mario es pequeño al inicar el juego
	set(value){
		field = value
	}
	get() = field
	private var lives =3 //uno empieza el juego con 3 vidas

	//resta una vida al jugador
	private fun die (){
		lives--
		println("Has perdido una vida")
	}

	//el modificador es redundente
	//en funcion del objeto es colisionante, se ejecuta un evento
	public fun collision(collisionObj: Sting){
		when(collisionObj){
			"Goomba" -> die()
				"Super Mushroom" -> state = "Super Mario"
			"Fire flower" -> state = "Fire Mario"
			else -> println("Objeto desconocido ¡no pasa nada!")
		}
	}	
}
